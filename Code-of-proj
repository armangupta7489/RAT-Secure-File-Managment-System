#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <time.h>
#include <unistd.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <utime.h>

#define MAX_FILENAME 512    
#define MAX_CONTENT 2048    
#define MAX_COMMAND 1024    
#define PASSWORD "admin123" 
#define LOG_FILE "file_ops.log"


void show_menu();
void authenticate();
void log_operation(const char* operation, const char* filename);
void list_files();
void create_file();
void delete_file();
void rename_file();
void edit_file();
void search_file();
void view_file();
void sort_file();
void copy_file();
void move_file();
void append_to_file();
void check_file_size();
void check_last_modified();
void clear_file();
void encrypt_file();
void decrypt_file();
void compress_file();
void decompress_file();
void change_permissions();
void backup_file();
void search_content();

int main() {
    authenticate();
    int choice;
    while (1) {
        show_menu();
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            printf("Invalid input! Please enter a number.\n");
            while (getchar() != '\n'); 
            continue;
        }
        getchar(); 
        switch (choice) {
            case 1: list_files(); break;
            case 2: create_file(); break;
            case 3: delete_file(); break;
            case 4: rename_file(); break;
            case 5: edit_file(); break;
            case 6: search_file(); break;
            case 7: view_file(); break;
            case 8: sort_file(); break;
            case 9: copy_file(); break;
            case 10: move_file(); break;
            case 11: append_to_file(); break;
            case 12: check_file_size(); break;
            case 13: check_last_modified(); break;
            case 14: clear_file(); break;
            case 15: encrypt_file(); break;
            case 16: decrypt_file(); break;
            case 17: compress_file(); break;
            case 18: decompress_file(); break;
            case 19: change_permissions(); break;
            case 20: backup_file(); break;
            case 21: search_content(); break;
            case 0: printf("Exiting program.\n"); exit(0);
            default: printf("Invalid choice, please try again.\n");
        }
    }
    return 0;
}

void authenticate() {
    char input_password[50];
    int attempts = 3;
    while (attempts > 0) {
        printf("Enter password (%d attempts remaining): ", attempts);
        fgets(input_password, sizeof(input_password), stdin);
        input_password[strcspn(input_password, "\n")] = 0;
        if (strcmp(input_password, PASSWORD) == 0) {
            printf("Access Granted!\n");
            return;
        }
        printf("Incorrect password!\n");
        attempts--;
    }
    printf("Access Denied! Too many failed attempts.\n");
    exit(1);
}

void log_operation(const char* operation, const char* filename) {
    FILE* log = fopen(LOG_FILE, "a");
    if (log) {
        time_t now;
        time(&now);
        fprintf(log, "[%s] %s: %s\n", ctime(&now), operation, filename);
        fclose(log);
    }
}

void show_menu() {
    printf("\n==== Advanced File Management System ====\n");
    printf("1. List all files\n");
    printf("2. Create a new file\n");
    printf("3. Delete a file\n");
    printf("4. Rename a file\n");
    printf("5. Edit file content\n");
    printf("6. Search for a file\n");
    printf("7. View file content\n");
    printf("8. Sort file content\n");
    printf("9. Copy file\n");
    printf("10. Move file\n");
    printf("11. Append content to file\n");
    printf("12. Check file size\n");
    printf("13. Check last modified time\n");
    printf("14. Clear file content\n");
    printf("15. Encrypt file\n");
    printf("16. Decrypt file\n");
    printf("17. Compress file\n");
    printf("18. Decompress file\n");
    printf("19. Change file permissions\n");
    printf("20. Backup file\n");
    printf("21. Search content in file\n");
    printf("0. Exit\n");
}

void list_files() {
    DIR* dir = opendir(".");
    if (!dir) {
        printf("Error opening directory: %s\n", strerror(errno));
        return;
    }
    struct dirent* entry;
    printf("Directory contents:\n");
    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_name[0] != '.') {
            struct stat st;
            if (stat(entry->d_name, &st) == 0) {
                printf("%-20s %ld bytes %s", entry->d_name, st.st_size, ctime(&st.st_mtime));
            }
        }
    }
    closedir(dir);
    log_operation("List files", "directory");
}

void create_file() {
    char filename[MAX_FILENAME];
    printf("Enter filename to create: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    FILE* fp = fopen(filename, "w");
    if (fp) {
        fclose(fp);
        printf("File '%s' created successfully!\n", filename);
        log_operation("Create", filename);
    } else {
        printf("Error creating file: %s\n", strerror(errno));
    }
}

void delete_file() {
    char filename[MAX_FILENAME];
    printf("Enter filename to delete: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    if (remove(filename) == 0) {
        printf("File '%s' deleted successfully!\n", filename);
        log_operation("Delete", filename);
    } else {
        printf("Error deleting file: %s\n", strerror(errno));
    }
}

void rename_file() {
    char oldname[MAX_FILENAME], newname[MAX_FILENAME];
    printf("Enter current filename: ");
    fgets(oldname, MAX_FILENAME, stdin);
    oldname[strcspn(oldname, "\n")] = 0;
    printf("Enter new filename: ");
    fgets(newname, MAX_FILENAME, stdin);
    newname[strcspn(newname, "\n")] = 0;
    if (rename(oldname, newname) == 0) {
        printf("File renamed successfully!\n");
        log_operation("Rename", oldname);
    } else {
        printf("Error renaming file: %s\n", strerror(errno));
    }
}

void edit_file() {
    char filename[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to edit: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(command, "nano \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        log_operation("Edit", filename);
    } else {
        printf("Error editing file: %s\n", strerror(errno));
    }
}

void search_file() {
    char filename[MAX_FILENAME];
    printf("Enter filename to search: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    if (access(filename, F_OK) != -1) {
        printf("File '%s' found!\n", filename);
        log_operation("Search", filename);
    } else {
        printf("File not found!\n");
    }
}

void view_file() {
    char filename[MAX_FILENAME];
    printf("Enter filename to view: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    FILE* fp = fopen(filename, "r");
    if (!fp) {
        printf("Error opening file: %s\n", strerror(errno));
        return;
    }
    char ch;
    while ((ch = fgetc(fp)) != EOF) {
        putchar(ch);
    }
    fclose(fp);
    printf("\n");
    log_operation("View", filename);
}

void sort_file() {
    char filename[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to sort: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(command, "sort \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 10);
    strncat(command, "\" -o \"", MAX_COMMAND - strlen(command));
    strncat(command, filename, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File sorted successfully!\n");
        log_operation("Sort", filename);
    } else {
        printf("Error sorting file!\n");
    }
}

void copy_file() {
    char src[MAX_FILENAME], dest[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter source filename: ");
    fgets(src, MAX_FILENAME, stdin);
    src[strcspn(src, "\n")] = 0;
    printf("Enter destination filename: ");
    fgets(dest, MAX_FILENAME, stdin);
    dest[strcspn(dest, "\n")] = 0;
    strcpy(command, "cp \"");
    strncat(command, src, MAX_FILENAME - strlen(command) - 10);
    strncat(command, "\" \"", MAX_COMMAND - strlen(command));
    strncat(command, dest, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File copied successfully!\n");
        log_operation("Copy", src);
    } else {
        printf("Error copying file!\n");
    }
}

void move_file() {
    char src[MAX_FILENAME], dest[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter source filename: ");
    fgets(src, MAX_FILENAME, stdin);
    src[strcspn(src, "\n")] = 0;
    printf("Enter destination filename: ");
    fgets(dest, MAX_FILENAME, stdin);
    dest[strcspn(dest, "\n")] = 0;
    strcpy(command, "mv \"");
    strncat(command, src, MAX_FILENAME - strlen(command) - 10);
    strncat(command, "\" \"", MAX_COMMAND - strlen(command));
    strncat(command, dest, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File moved successfully!\n");
        log_operation("Move", src);
    } else {
        printf("Error moving file!\n");
    }
}

void append_to_file() {
    char filename[MAX_FILENAME], content[MAX_CONTENT];
    printf("Enter filename: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    printf("Enter content to append: ");
    fgets(content, MAX_CONTENT, stdin);
    FILE* fp = fopen(filename, "a");
    if (fp) {
        fprintf(fp, "%s", content);
        fclose(fp);
        printf("Content appended successfully!\n");
        log_operation("Append", filename);
    } else {
        printf("Error opening file: %s\n", strerror(errno));
    }
}

void check_file_size() {
    char filename[MAX_FILENAME];
    printf("Enter filename: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    struct stat st;
    if (stat(filename, &st) == 0) {
        printf("File size: %ld bytes\n", st.st_size);
        log_operation("Check size", filename);
    } else {
        printf("Error getting file size: %s\n", strerror(errno));
    }
}

void check_last_modified() {
    char filename[MAX_FILENAME];
    printf("Enter filename: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    struct stat st;
    if (stat(filename, &st) == 0) {
        printf("Last modified: %s", ctime(&st.st_mtime));
        log_operation("Check modified", filename);
    } else {
        printf("Error getting file modification time: %s\n", strerror(errno));
    }
}

void clear_file() {
    char filename[MAX_FILENAME];
    printf("Enter filename to clear: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    FILE* fp = fopen(filename, "w");
    if (fp) {
        fclose(fp);
        printf("File '%s' cleared successfully!\n", filename);
        log_operation("Clear", filename);
    } else {
        printf("Error clearing file: %s\n", strerror(errno));
    }
}

void encrypt_file() {
    char filename[MAX_FILENAME], output[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to encrypt: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(output, filename);
    strncat(output, ".enc", MAX_FILENAME - strlen(output) - 1);
    strcpy(command, "openssl enc -aes-256-cbc -salt -in \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 20);
    strncat(command, "\" -out \"", MAX_COMMAND - strlen(command));
    strncat(command, output, MAX_FILENAME - strlen(command) - 20);
    strncat(command, "\" -k ", MAX_COMMAND - strlen(command));
    strncat(command, PASSWORD, MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File encrypted successfully as %s\n", output);
        log_operation("Encrypt", filename);
    } else {
        printf("Error encrypting file!\n");
    }
}

void decrypt_file() {
    char filename[MAX_FILENAME], output[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to decrypt: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(output, filename);
    strncat(output, ".dec", MAX_FILENAME - strlen(output) - 1);
    strcpy(command, "openssl enc -aes-256-cbc -d -in \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 20);
    strncat(command, "\" -out \"", MAX_COMMAND - strlen(command));
    strncat(command, output, MAX_FILENAME - strlen(command) - 20);
    strncat(command, "\" -k ", MAX_COMMAND - strlen(command));
    strncat(command, PASSWORD, MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File decrypted successfully as %s\n", output);
        log_operation("Decrypt", filename);
    } else {
        printf("Error decrypting file!\n");
    }
}

void compress_file() {
    char filename[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to compress: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(command, "gzip \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File compressed successfully!\n");
        log_operation("Compress", filename);
    } else {
        printf("Error compressing file!\n");
    }
}

void decompress_file() {
    char filename[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to decompress: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(command, "gunzip \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File decompressed successfully!\n");
        log_operation("Decompress", filename);
    } else {
        printf("Error decompressing file!\n");
    }
}

void change_permissions() {
    char filename[MAX_FILENAME], perms[10];
    char command[MAX_COMMAND];
    printf("Enter filename: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    printf("Enter permissions (e.g., 755): ");
    fgets(perms, 10, stdin);
    perms[strcspn(perms, "\n")] = 0;
    strcpy(command, "chmod ");
    strncat(command, perms, 10);
    strncat(command, " \"", MAX_COMMAND - strlen(command));
    strncat(command, filename, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("Permissions changed successfully!\n");
        log_operation("Change permissions", filename);
    } else {
        printf("Error changing permissions!\n");
    }
}

void backup_file() {
    char filename[MAX_FILENAME], backup[MAX_FILENAME];
    char command[MAX_COMMAND];
    printf("Enter filename to backup: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    strcpy(backup, filename);
    strncat(backup, ".bak", MAX_FILENAME - strlen(backup) - 1);
    strcpy(command, "cp \"");
    strncat(command, filename, MAX_FILENAME - strlen(command) - 10);
    strncat(command, "\" \"", MAX_COMMAND - strlen(command));
    strncat(command, backup, MAX_FILENAME - strlen(command) - 2);
    strncat(command, "\"", MAX_COMMAND - strlen(command));
    if (system(command) == 0) {
        printf("File backed up as %s\n", backup);
        log_operation("Backup", filename);
    } else {
        printf("Error creating backup!\n");
    }
}

void search_content() {
    char filename[MAX_FILENAME], search_term[MAX_CONTENT];
    printf("Enter filename: ");
    fgets(filename, MAX_FILENAME, stdin);
    filename[strcspn(filename, "\n")] = 0;
    printf("Enter search term: ");
    fgets(search_term, MAX_CONTENT, stdin);
    search_term[strcspn(search_term, "\n")] = 0;
    FILE* fp = fopen(filename, "r");
    if (!fp) {
        printf("Error opening file: %s\n", strerror(errno));
        return;
    }
    char line[MAX_CONTENT];
    int line_num = 0;
    while (fgets(line, sizeof(line), fp)) {
        line_num++;
        if (strstr(line, search_term)) {
            printf("Line %d: %s", line_num, line);
        }
    }
    fclose(fp);
    log_operation("Search content", filename);
}

